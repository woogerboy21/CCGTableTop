
#include <QtCore/QDebug>
#include "websocketserver.h"
#include "QtWebSockets/qwebsocketserver.h"
#include "QtWebSockets/qwebsocket.h"
#include "protocolhandler.h"

QT_USE_NAMESPACE

WebSocketServer::WebSocketServer(quint16 port, bool debug, QObject *parent) :
    QObject(parent),
    m_pWebSocketServer(new QWebSocketServer(QStringLiteral("CCGTableTop"),
    QWebSocketServer::NonSecureMode, this)),
    m_clients(),
    m_debug(debug)
{
    if (m_pWebSocketServer->listen(QHostAddress::Any, port)) {
            qDebug() << "WebSocket server listening on port [" << port << "]";
	
		connect(m_pWebSocketServer, &QWebSocketServer::newConnection,this, &WebSocketServer::onNewConnection);
        connect(m_pWebSocketServer, &QWebSocketServer::closed, this, &WebSocketServer::closed);
    }
}

WebSocketServer::~WebSocketServer()
{
    m_pWebSocketServer->close();
    qDeleteAll(m_clients.begin(), m_clients.end());
}

void WebSocketServer::onNewConnection()
{
    QWebSocket *pSocket = m_pWebSocketServer->nextPendingConnection();
    connect(pSocket, &QWebSocket::textMessageReceived, this, &WebSocketServer::processTextMessage);
    connect(pSocket, &QWebSocket::binaryMessageReceived, this, &WebSocketServer::processBinaryMessage);
    connect(pSocket, &QWebSocket::disconnected, this, &WebSocketServer::socketDisconnected);
    m_clients << pSocket;
}

void WebSocketServer::processTextMessage(QString message)
{
    // ** WE ARE EXPECTING JSON CONTENT (PREF SERIALIZED) ** //

    QWebSocket *pClient = qobject_cast<QWebSocket *>(sender());
    if (m_debug)
        qDebug() << "Message received:" << message;

    if (pClient) {

        // convert serialized string to json object
        QJsonDocument content(QJsonDocument::fromJson(message.toUtf8()));
        QJsonObject jsonContent = content.object();

        // validate json schema
        if (validateJSONSchema(jsonContent)) {
            // send json object for processing
            ProtocolHandler protocol;
            QJsonObject commandResult = protocol.processJSONData(jsonContent);

            // format results to return to client
            QJsonDocument results(commandResult);
            QString returnresults(results.toJson(QJsonDocument::Compact));

            // return results to client
            pClient->sendTextMessage(returnresults);
        } else {
            pClient->sendTextMessage("{RESPONSE:RESPONSE ID:0 CODE:FAILED}");
        }
    }
}

void WebSocketServer::processBinaryMessage(QByteArray message)
{
    QWebSocket *pClient = qobject_cast<QWebSocket *>(sender());
    if (m_debug)
        qDebug() << "Binary Message received:" << message;
    if (pClient) {
        pClient->sendBinaryMessage(message);
    }
}

void WebSocketServer::socketDisconnected()
{
    QWebSocket *pClient = qobject_cast<QWebSocket *>(sender());
    if (m_debug)
        qDebug() << "socketDisconnected:" << pClient;
    if (pClient) {
        m_clients.removeAll(pClient);
        pClient->deleteLater();
    }
}

bool WebSocketServer::validateJSONSchema(QJsonObject &JSon)
{
    if (m_debug) qDebug() << "Validating JSON fomat (" << JSon << ")";
    if (!JSon.isEmpty()){                     // validate object is not empty
        if (JSon.contains("COMMAND")){          // validate commands
            if (m_debug) qDebug() << "...Object contains a COMMAND index";
            if (JSon.contains("ID")){
                if (m_debug) qDebug() << "...Object contains a COMMAND-ID index";
                if (JSon.contains("TYPE")){
                    if (m_debug) qDebug() << "...Object contains a COMMAND-TYPE index";

                    //VALIDATE SESSION COMMAND DETAILS
                    if (m_debug) qDebug() << "[+]Object appears to be a valid SESSION-COMMAND formatT";

                    //VALIDATE GAME COMMAND DETAILS
                    if (m_debug) qDebug() << "[+]Object appears to be a valid GAME-COMMAND format";

                    //VALIDATE ROOM COMMAND DETAILS
                    if (m_debug) qDebug() << "[+]Object appears to be a valid ROOM-COMMAND format";

                    //VALIDATE MODERATOR COMMAND DETAILS
                    if (m_debug) qDebug() << "[+]Object appears to be a valid MODERATOR-COMMAND format";

                    //VALIDATE ADMIN COMMAND DETAILS
                    if (m_debug) qDebug() << "[+]Object appears to be a valid ADMIN-COMMAND format";

                    return true;
                }
            }
        }

        if (JSon.contains("RESPONSE"))         // validate responses
            if (m_debug) qDebug() << "...Objext contains a RESPONSE index";
            if (JSon.contains("ID"))
                if (m_debug) qDebug() << "...Object contains a RESPONSE-ID index";
                if (JSon.contains("CODE")){
                    if (m_debug) qDebug() << "...Object contains a RESPONSE-CODE index";
                    if (m_debug) qDebug() << "[+]Object appears to be a valid RESPONSE format";
                    return true;
                }
    }

    if (m_debug) qDebug() << "[-]Object appears to contain invalid formating";
    return false;
}


